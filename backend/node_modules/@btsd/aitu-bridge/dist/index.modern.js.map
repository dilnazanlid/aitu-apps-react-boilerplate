{"version":3,"file":"index.modern.js","sources":["../src/promisifyMethod.ts","../src/index.ts","../src/promisifyInvoke.ts","../src/promisifyStorage.ts"],"sourcesContent":["function createCounter() {\n  return {\n    current: 0,\n    next() {\n      return ++this.current;\n    },\n  };\n}\n\nfunction createRequestResolver() {\n  type PromiseController = {\n    resolve: (value: any) => any;\n    reject: (reason: any) => any;\n  };\n\n  const counter = createCounter();\n  const promiseControllers: Record<string, PromiseController | null> = {};\n\n  return {\n    add(controller: PromiseController, customId?: number | string): number | string {\n      const id = customId != null ? customId : counter.next();\n      const methodId = id;\n      promiseControllers[methodId] = controller;\n      return methodId;\n    },\n\n    resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n      const requestPromise = promiseControllers[reqId];\n\n      if (requestPromise) {\n        if (isSuccess(error)) {\n          requestPromise.resolve(data);\n        } else {\n          requestPromise.reject(error);\n        }\n\n        promiseControllers[reqId] = null;\n      }\n    },\n  };\n}\n\nfunction promisifyMethod(method, subscribe: (fn: any) => void) {\n  const requestResolver = createRequestResolver();\n\n  subscribe((event) => {\n    if (!event.detail) {\n      return;\n    }\n\n    if ('reqId' in event.detail) {\n      const { reqId, data, error } = event.detail;\n\n      if (reqId) {\n        requestResolver.resolve(reqId, data, (error) => !(error), error);\n      }\n    }\n  });\n\n  return function promisifiedFunc(...args: any[]): Promise<any | void> {\n    return new Promise((resolve, reject) => {\n      const reqId = requestResolver.add({ resolve, reject });\n\n      method(reqId, ...args);\n    });\n  };\n}\n\nexport default promisifyMethod;\n","import promisifyInvoke from './promisifyInvoke';\nimport promisifyStorage from './promisifyStorage';\nimport promisifyMethod from './promisifyMethod';\n\nenum EInvokeRequest {\n  getMe = 'GetMe',\n  getPhone = 'GetPhone',\n  getContacts = 'GetContacts',\n  enableNotifications = 'AllowNotifications',\n  disableNotifications = 'DisableNotifications'\n}\n\ntype SetItemType = (keyName: string, keyValue: string) => Promise<void>;\ntype GetItemType = (keyName: string) => Promise<string | null>;\ntype ClearType = () => Promise<void>;\n\ninterface GetPhoneResponse {\n  phone: string;\n  sign: string;\n}\n\ninterface GetMeResponse {\n  name: string;\n  lastname: string;\n  id: string;\n  avatar?: string;\n  avatarThumb?: string;\n  sign: string;\n}\n\ninterface ResponseObject {\n  phone?: string;\n  name?: string;\n  lastname?: string;\n}\n\ninterface GetGeoResponse {\n  latitude: number;\n  longitude: number;\n}\n\ninterface GetContactsResponse {\n  contacts: Array<{\n    first_name: string;\n    last_name: string;\n    phone: string;\n  }>;\n  sign: string;\n}\n\ninterface SelectContactResponse {\n  phone: string;\n  name: string;\n  lastname: string;\n}\n\ntype OpenSettingsResponse = 'success' | 'failed';\ntype ShareResponse = 'success' | 'failed';\ntype CopyToClipboardResponse = 'success' | 'failed';\ntype VibrateResponse = 'success' | 'failed';\n\ntype BridgeInvoke<T extends EInvokeRequest, R> = (method: T, data?: {}) => Promise<R>;\n\ninterface BridgeStorage {\n  setItem: SetItemType,\n  getItem: GetItemType,\n  clear: ClearType\n}\n\ninterface AituBridge {\n  invoke: BridgeInvoke<EInvokeRequest, ResponseObject>;\n  storage: BridgeStorage;\n  getMe: () => Promise<GetMeResponse>;\n  getPhone: () => Promise<GetPhoneResponse>;\n  getContacts: () => Promise<GetContactsResponse>;\n  getGeo: () => Promise<GetGeoResponse>;\n  selectContact: () => Promise<SelectContactResponse>;\n  getQr: () => Promise<string>;\n  share: (text: string) => Promise<ShareResponse>;\n  copyToClipboard: (text: string) => Promise<CopyToClipboardResponse>;\n  shareImage: (text: string, image: string) => Promise<ShareResponse>;\n  enableNotifications: () => Promise<{}>;\n  disableNotifications: () => Promise<{}>;\n  openSettings: () => Promise<OpenSettingsResponse>;\n  setShakeHandler: (handler: any) => void;\n  vibrate: (pattern: number[]) => Promise<VibratePattern>;\n  isSupported: () => boolean;\n  supports: (method: string) => boolean;\n  sub: any;\n}\n\nconst invokeMethod = 'invoke';\nconst storageMethod = 'storage';\nconst getGeoMethod = 'getGeo';\nconst getQrMethod = 'getQr';\nconst selectContactMethod = 'selectContact';\nconst openSettingsMethod = 'openSettings';\nconst shareMethod = 'share';\nconst copyToClipboardMethod = 'copyToClipboard';\nconst shareImageMethod = 'shareImage';\nconst setShakeHandlerMethod = 'setShakeHandler';\nconst vibrateMethod = 'vibrate';\n\nconst android = typeof window !== 'undefined' && (window as any).AndroidBridge;\nconst ios = typeof window !== 'undefined' && (window as any).webkit && (window as any).webkit.messageHandlers;\nconst web = typeof window !== 'undefined' && (window.top !== window) && ((window as any).WebBridge = (window as any).WebBridge || {});\n\nif (web) {\n  const aituOrigin = (window as any).AITU_ORIGIN || 'https://aitu.io';\n\n  [invokeMethod, storageMethod].forEach((method) => {\n    if (!web[method]) {\n      web[method] = (...args) => window.top.postMessage(JSON.stringify({\n        method,\n        payload: args,\n      }), aituOrigin);\n    }\n  });\n\n  window.addEventListener('message', (event) => {\n    if (event.origin === aituOrigin && event.data) {\n      try {\n        const detail = JSON.parse(event.data);\n        window.dispatchEvent(new CustomEvent('aituEvents', { detail }));\n      } catch(e) {}\n    }\n  });\n}\n\nconst buildBridge = (): AituBridge => {\n  const subs = [];\n\n  if (typeof window !== 'undefined') {\n    window.addEventListener('aituEvents', (e: any) => {\n      [...subs].map((fn) => fn.call(null, e));\n    })\n  }\n\n  const invoke = (reqId, method, data = {}) => {\n    const isAndroid = android && android[invokeMethod];\n    const isIos = ios && ios[invokeMethod];\n    const isWeb = web && web[invokeMethod];\n\n    if (isAndroid) {\n      android[invokeMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[invokeMethod].postMessage({ reqId, method, data });\n    } else if (isWeb) {\n      web[invokeMethod](reqId, method, data);\n    } else if (typeof window !== 'undefined') {\n      console.log('--invoke-isUnknown');\n    }\n  };\n\n  const storage = (reqId, method, data = {}) => {\n    const isAndroid = android && android[storageMethod];\n    const isIos = ios && ios[storageMethod];\n    const isWeb = web && web[storageMethod];\n\n    if (isAndroid) {\n      android[storageMethod](reqId, method, JSON.stringify(data));\n    } else if (isIos) {\n      ios[storageMethod].postMessage({ reqId, method, data });\n    } else if (isWeb) {\n      web[storageMethod](reqId, method, data);\n    } else if (typeof window !== 'undefined') {\n      console.log('--storage-isUnknown');\n    }\n  }\n\n  const getGeo = (reqId) => {\n    const isAndroid = android && android[getGeoMethod];\n    const isIos = ios && ios[getGeoMethod];\n\n    if (isAndroid) {\n      android[getGeoMethod](reqId);\n    } else if (isIos) {\n      ios[getGeoMethod].postMessage({ reqId });\n    } else if (typeof window !== 'undefined') {\n      console.log('--getGeo-isWeb');\n    }\n  }\n\n  const getQr = (reqId) => {\n    const isAndroid = android && android[getQrMethod];\n    const isIos = ios && ios[getQrMethod];\n\n    if (isAndroid) {\n      android[getQrMethod](reqId);\n    } else if (isIos) {\n      ios[getQrMethod].postMessage({ reqId });\n    } else if (typeof window !== 'undefined') {\n      console.log('--getQr-isWeb');\n    }\n  }\n\n  const selectContact = (reqId) => {\n    const isAndroid = android && android[selectContactMethod];\n    const isIos = ios && ios[selectContactMethod];\n\n    if (isAndroid) {\n      android[selectContactMethod](reqId);\n    } else if (isIos) {\n      ios[selectContactMethod].postMessage({ reqId });\n    } else if (typeof window !== 'undefined') {\n      console.log('--selectContact-isWeb');\n    }\n  }\n\n  const openSettings = (reqId) => {\n    const isAndroid = android && android[openSettingsMethod];\n    const isIos = ios && ios[openSettingsMethod];\n\n    if (isAndroid) {\n      android[openSettingsMethod](reqId);\n    } else if (isIos) {\n      ios[openSettingsMethod].postMessage({ reqId });\n    } else if (typeof window !== 'undefined') {\n      console.log('--openSettings-isWeb');\n    }\n  }\n\n  const share = (reqId, text) => {\n    const isAndroid = android && android[shareMethod];\n    const isIos = ios && ios[shareMethod];\n\n    if (isAndroid) {\n      android[shareMethod](reqId, text);\n    } else if (isIos) {\n      ios[shareMethod].postMessage({ reqId, text });\n    } else if (typeof window !== 'undefined') {\n      console.log('--share-isWeb');\n    }\n  }\n\n\n  const copyToClipboard  = (reqId, text) => {\n    const isAndroid = android && android[copyToClipboardMethod];\n    const isIos = ios && ios[copyToClipboardMethod];\n\n    if (isAndroid) {\n      android[copyToClipboardMethod](reqId, text);\n    } else if (isIos) {\n      ios[copyToClipboardMethod].postMessage({ reqId, text });\n    } else if (typeof window !== 'undefined') {\n      console.log('--copyToClipboard-isWeb');\n    }\n  }\n\n  const shareImage = (reqId, text, image) => {\n    const isAndroid = android && android[shareImageMethod];\n    const isIos = ios && ios[shareImageMethod];\n\n    if (isAndroid) {\n      android[shareImageMethod](reqId, text, image);\n    } else if (isIos) {\n      ios[shareImageMethod].postMessage({ reqId, text, image });\n    } else if (typeof window !== 'undefined') {\n      console.log('--shareImage-isWeb');\n    }\n  }\n\n  const enableNotifications = () => invokePromise(EInvokeRequest.enableNotifications);\n\n  const disableNotifications = () => invokePromise(EInvokeRequest.disableNotifications);\n\n  const setShakeHandler = (handler) => {\n    const isAndroid = android && android[setShakeHandlerMethod];\n    const isIos = ios && ios[setShakeHandlerMethod];\n\n    if (isAndroid || isIos) {\n      (window as any).onAituBridgeShake = handler;\n    } else if (typeof window !== 'undefined') {\n      console.log('--setShakeHandler-isWeb');\n    }\n  };\n\n  const vibrate = (reqId, pattern) => {\n    if (\n      !Array.isArray(pattern) ||\n      pattern.some((timing) => timing < 1 || timing !== Math.floor(timing)) ||\n      pattern.reduce((total, timing) => total + timing) > 10000\n    ) {\n      console.error('Pattern should be an array of positive integers no longer than 10000ms total');\n      return;\n    }\n\n    const isAndroid = android && android[vibrateMethod];\n    const isIos = ios && ios[vibrateMethod];\n\n    if (isAndroid) {\n      android[vibrateMethod](reqId, JSON.stringify(pattern));\n    } else if (isIos) {\n      ios[vibrateMethod].postMessage({ reqId, pattern });\n    } else if (typeof window !== 'undefined') {\n      console.log('--vibrate-isWeb');\n    }\n  }\n\n  const isSupported = () => {\n    return android || ios || web;\n  }\n\n  const supports = (method) =>\n    (android && typeof android[method] === 'function') ||\n    (ios && ios[method] && typeof ios[method].postMessage === 'function') ||\n    (web && typeof web[method] === 'function');\n\n  const sub = (listener: any) => {\n    subs.push(listener);\n  }\n\n  const invokePromise = promisifyInvoke(invoke, sub);\n  const storagePromise = promisifyStorage(storage, sub);\n  const getGeoPromise = promisifyMethod(getGeo, sub);\n  const getQrPromise = promisifyMethod(getQr, sub);\n  const selectContactPromise = promisifyMethod(selectContact, sub);\n  const openSettingsPromise = promisifyMethod(openSettings, sub);\n  const sharePromise = promisifyMethod(share, sub);\n  const copyToClipboardPromise = promisifyMethod(copyToClipboard, sub);\n  const shareImagePromise = promisifyMethod(shareImage, sub);\n  const vibratePromise = promisifyMethod(vibrate, sub);\n\n  return {\n    copyToClipboard: copyToClipboardPromise,\n    invoke: invokePromise,\n    storage: storagePromise,\n    getMe: () => invokePromise(EInvokeRequest.getMe),\n    getPhone: () => invokePromise(EInvokeRequest.getPhone),\n    getContacts: () => invokePromise(EInvokeRequest.getContacts),\n    getGeo: getGeoPromise,\n    getQr: getQrPromise,\n    selectContact: selectContactPromise,\n    enableNotifications,\n    disableNotifications,\n    openSettings: openSettingsPromise,\n    share: sharePromise,\n    shareImage: shareImagePromise,\n    setShakeHandler,\n    vibrate: vibratePromise,\n    isSupported,\n    supports,\n    sub\n  }\n}\n\nconst bridge = buildBridge();\n\nexport default bridge;\n","function createCounter() {\n  return {\n    current: 0,\n    next() {\n      return ++this.current;\n    },\n  };\n}\n\nfunction createRequestResolver() {\n  type PromiseController = {\n    resolve: (value: any) => any;\n    reject: (reason: any) => any;\n  };\n\n  const counter = createCounter();\n  const promiseControllers: Record<string, PromiseController | null> = {};\n\n  return {\n    add(controller: PromiseController, customId?: number | string): number | string {\n      const id = customId != null ? customId : counter.next();\n      const invokeId = id;\n      promiseControllers[invokeId] = controller;\n      return invokeId;\n    },\n\n    resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n      const requestPromise = promiseControllers[reqId];\n\n      if (requestPromise) {\n        if (isSuccess(error)) {\n          requestPromise.resolve(data);\n        } else {\n          requestPromise.reject(error);\n        }\n\n        promiseControllers[reqId] = null;\n      }\n    },\n  };\n}\n\nfunction promisifyInvoke(invoke, subscribe: (fn: any) => void) {\n  const requestResolver = createRequestResolver();\n\n  subscribe((event) => {\n    if (!event.detail) {\n      return;\n    }\n\n    if ('reqId' in event.detail) {\n      const { reqId, data, error } = event.detail;\n\n      if (reqId) {\n        requestResolver.resolve(reqId, data, (error) => !(error), error);\n      }\n    }\n  });\n\n  return function promisifiedFunc(method: any, props: any = {}): Promise<any | void> {\n    return new Promise((resolve, reject) => {\n      const reqId = requestResolver.add({ resolve, reject }, props.reqId);\n\n      invoke(reqId, method, props);\n    });\n  };\n}\n\nexport default promisifyInvoke;\n","function createCounter() {\n    return {\n      current: 0,\n      next() {\n        return ++this.current;\n      },\n    };\n  }\n  \n  function createRequestResolver() {\n    type PromiseController = {\n      resolve: (value: any) => any;\n      reject: (reason: any) => any;\n    };\n  \n    const counter = createCounter();\n    const promiseControllers: Record<string, PromiseController | null> = {};\n  \n    return {\n      add(controller: PromiseController, customId?: number | string): number | string {\n        const id = customId != null ? customId : counter.next();\n        const storageId = `s${id}`;\n        promiseControllers[storageId] = controller;\n        return storageId;\n      },\n  \n      resolve<T>(reqId: number | string, data: T, isSuccess: (data: T) => boolean, error: any) {\n        const requestPromise = promiseControllers[reqId];\n  \n        if (requestPromise) {\n          if (isSuccess(error)) {\n            requestPromise.resolve(data);\n          } else {\n            requestPromise.reject(error);\n          }\n  \n          promiseControllers[reqId] = null;\n        }\n      },\n    };\n  }\n  \n  function promisifyStorage(storage, subscribe: (fn: any) => void) {\n    const requestResolver = createRequestResolver();\n  \n    subscribe((event) => {\n      if (!event.detail) {\n        return;\n      }\n  \n      if ('reqId' in event.detail) {\n        const { reqId, data, error } = event.detail;\n  \n        if (reqId) {\n          requestResolver.resolve(reqId, data, (error) => !(error), error);\n        }\n      }\n    });\n\n    return {\n      setItem: (keyName: string, keyValue: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'setItem', { keyName, keyValue });\n        });\n      },\n      getItem: (keyName: string): Promise<string | null> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'getItem', { keyName });\n        });\n      },\n      clear: (): Promise<void> => {\n        return new Promise((resolve, reject) => {\n          const reqId = requestResolver.add({ resolve, reject });\n          storage(reqId, 'clear', {});\n        });\n      },\n    }\n  }\n  \n  export default promisifyStorage;\n  "],"names":["promisifyMethod","method","subscribe","requestResolver","counter","current","next","this","promiseControllers","add","controller","customId","methodId","resolve","reqId","data","isSuccess","error","requestPromise","reject","createRequestResolver","event","detail","args","Promise","EInvokeRequest","invokeMethod","storageMethod","android","window","AndroidBridge","ios","webkit","messageHandlers","web","top","WebBridge","aituOrigin","AITU_ORIGIN","forEach","postMessage","JSON","stringify","payload","addEventListener","origin","parse","dispatchEvent","CustomEvent","e","bridge","subs","map","fn","call","sub","listener","push","invokePromise","invoke","invokeId","props","isIos","isWeb","console","log","promisifyInvoke","storagePromise","storage","storageId","setItem","keyName","keyValue","getItem","clear","promisifyStorage","getGeoPromise","getQrPromise","selectContactPromise","openSettingsPromise","sharePromise","text","copyToClipboardPromise","shareImagePromise","image","vibratePromise","pattern","Array","isArray","some","timing","Math","floor","reduce","total","copyToClipboard","getMe","getPhone","getContacts","getGeo","getQr","selectContact","enableNotifications","disableNotifications","openSettings","share","shareImage","setShakeHandler","handler","onAituBridgeShake","vibrate","isSupported","supports","buildBridge"],"mappings":"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"}